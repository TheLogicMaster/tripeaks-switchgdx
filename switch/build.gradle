import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
}

def appTitle = 'TriPeaks'
def appAuthor = 'TheLogicMaster'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    transpiler {
        transitive = false
    }
    switchgdx {
        transitive = false
    }
    retrolambda {
        transitive = false
    }
}

dependencies {
    switchgdx "com.thelogicmaster:switch-gdx:$switchGdxVersion"
    transpiler "com.thelogicmaster.clearwing-vm:transpiler:$clearwingVersion"
    retrolambda "net.orfjackal.retrolambda:retrolambda:$retroLambdaVersion"
    implementation project(':core')
    implementation "com.thelogicmaster:switch-gdx:$switchGdxVersion"
    implementation "com.thelogicmaster.clearwing-vm:runtime:$clearwingVersion"
}

task transpile(dependsOn: 'build') {
    doLast {
        delete "$buildDir/transpiler_input"
        delete "$buildDir/transpiler_output"
        delete "$buildDir/dist"

        copy {
            from sourceSets.main.output
            from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            into "$buildDir/transpiler_input"
            exclude "META-INF", "META-INF/**"
            exclude "*/**/*.h"
            exclude "*/**/*.c"
            exclude "*/**/*.cpp"
            includeEmptyDirs = false
            duplicatesStrategy = "INCLUDE"
        }

        copy {
            from sourceSets.main.output
            from({ zipTree(configurations.switchgdx.singleFile.absolutePath) })
            into "$buildDir/transpiler_input"
            exclude "META-INF", "META-INF/**"
            exclude "*/**/*.h"
            exclude "*/**/*.c"
            exclude "*/**/*.cpp"
            includeEmptyDirs = false
        }

        File classpathFile = File.createTempFile("inc-", ".path")
        classpathFile.withWriter('UTF-8') { writer ->
            for (String item : configurations.compileClasspath)
                writer.write("$item\n")
            writer.write("$buildDir/transpiler_input")
        }
        classpathFile.deleteOnExit();
        javaexec {
            main = "-jar"
            args = ["$configurations.retrolambda.singleFile.absolutePath"]
            jvmArgs = [
                    "-Dretrolambda.inputDir=$buildDir/transpiler_input",
                    "-Dretrolambda.classpathFile=${classpathFile.absolutePath}",
                    '-Dretrolambda.defaultMethods=true',
                    "-javaagent:$configurations.retrolambda.singleFile.absolutePath"
            ]
        }

        javaexec {
            main = "-jar"
            args = [
                    "$configurations.transpiler.singleFile.absolutePath",
                    "$buildDir/transpiler_input",
                    "$buildDir/transpiler_output",
                    "$projectDir/switch.json",
                    "com.thelogicmaster.switchgdx.SwitchLauncher"
            ]
        }

        copy {
            from("$buildDir/transpiler_output") {
                include "*.h"
            }
            into "$buildDir/dist/include"
        }

        copy {
            from("$buildDir/transpiler_output") {
                include "*.c"
                include "*.cpp"
            }
            into "$buildDir/dist/source"
        }

        copy {
            from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            include "*/**/*.h"
            into "$buildDir/dist/include"
            includeEmptyDirs = false
        }

        copy {
            from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            include "*/**/*.c"
            include "*/**/*.cpp"
            into "$buildDir/dist/source"
            includeEmptyDirs = false
        }

        copy {
            from("$buildDir/transpiler_output") {
                include "CMakeLists.txt"
                include "Makefile"
                include "*.cmake"
                include "*.cmd"
                include "SDL2_mixer.*"
            }
            into "$buildDir/dist"
        }

        copy {
            from("$buildDir/transpiler_input") {
                exclude "**/*.class"
                exclude "META-INF", "META-INF/**"
                exclude "**/*.gwt.xml"
                exclude "*.c"
                exclude "*.cpp"
                exclude "*.h"
            }
            into "$buildDir/dist/romfs/classpath"
            includeEmptyDirs = false
        }

        copy {
            from "$rootDir/android/assets"
            into "$buildDir/dist/romfs"
        }

        copy {
            from "$projectDir/icon.jpg"
            into "$buildDir/dist"
        }

        // Patch to avoid compiler bug
        exec {
            environment "expression", "JAVA_BOOLEAN\\W+com_badlogic_gdx_assets_AssetManager_update___R_boolean\\(CODENAME_ONE_THREAD_STATE,\\W+JAVA_OBJECT\\W+__cn1ThisObject\\)\\W+{.*?}"
            environment "replacement", '' +
                    'JAVA_BOOLEAN com_badlogic_gdx_assets_AssetManager_update___R_boolean(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT __cn1ThisObject) {\n' +
                    '    DEFINE_INSTANCE_METHOD_STACK(2, 2, 0, 3091, 172);\n' +
                    '    monitorEnterBlock(threadStateData, __cn1ThisObject);\n' +
                    '    locals[0].data.o = __cn1ThisObject;\n' +
                    '    locals[0].type = CN1_TYPE_OBJECT;\n' +
                    '    volatile int restoreToL516329661cn1_class_id_java_lang_Throwable1;\n' +
                    '    int tryBlockOffsetL516329661cn1_class_id_java_lang_Throwable1;\n' +
                    '    DEFINE_CATCH_BLOCK(catch_L516329661cn1_class_id_java_lang_Throwable1, label_L1486954672, restoreToL516329661cn1_class_id_java_lang_Throwable1);\n\n' +
                    '    tryBlockOffsetL516329661cn1_class_id_java_lang_Throwable1 = threadStateData->tryBlockOffset;\n' +
                    '    BEGIN_TRY(cn1_class_id_java_lang_Throwable, catch_L516329661cn1_class_id_java_lang_Throwable1);\n' +
                    '    restoreToL516329661cn1_class_id_java_lang_Throwable1 = threadStateData->threadObjectStackOffset;\n\n' +
                    '    __CN1_DEBUG_INFO(421);\n' +
                    '    if (get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) == 0) {\n' +
                    '        while (1) {\n' +
                    '            __CN1_DEBUG_INFO(423);\n' +
                    '            if (get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_loadQueue(__cn1ThisObject)) == 0 ||\n' +
                    '                get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) != 0)\n' +
                    '                break;\n' +
                    '            __CN1_DEBUG_INFO(424);\n' +
                    '            com_badlogic_gdx_assets_AssetManager_nextTask__(threadStateData, __cn1ThisObject);\n' +
                    '        }\n' +
                    '        __CN1_DEBUG_INFO(426);\n' +
                    '        if (get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) == 0) {\n' +
                    '            END_TRY(2);\n' +
                    '            monitorExitBlock(threadStateData, __cn1ThisObject);\n' +
                    '            releaseForReturnInException(threadStateData, cn1LocalsBeginInThread, methodBlockOffset);\n' +
                    '            return JAVA_TRUE;\n' +
                    '        }\n' +
                    '    }\n' +
                    '    __CN1_DEBUG_INFO(428);\n' +
                    '    int result = com_badlogic_gdx_assets_AssetManager_updateTask___R_boolean(threadStateData, __cn1ThisObject) &&\n' +
                    '                 get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_loadQueue(__cn1ThisObject)) == 0 &&\n' +
                    '                 get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) == 0;\n' +
                    '    END_TRY(2);\n' +
                    '    monitorExitBlock(threadStateData, __cn1ThisObject);\n' +
                    '    releaseForReturnInException(threadStateData, cn1LocalsBeginInThread, methodBlockOffset);\n' +
                    '    return result;\n\n' +
                    '    label_L1486954672:\n' +
                    '    __CN1_DEBUG_INFO(429);\n' +
                    '    BC_ASTORE(1);\n' +
                    '    __CN1_DEBUG_INFO(430);\n' +
                    '    /* CustomInvoke */com_badlogic_gdx_assets_AssetManager_handleTaskError___java_lang_Throwable(threadStateData, __cn1ThisObject, locals[1].data.o);\n' +
                    '    __CN1_DEBUG_INFO(431);\n' +
                    '    result = get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_loadQueue(__cn1ThisObject)) == 0;\n' +
                    '    monitorExitBlock(threadStateData, __cn1ThisObject);\n' +
                    '    releaseForReturnInException(threadStateData, cn1LocalsBeginInThread, methodBlockOffset);\n' +
                    '    return result;\n' +
                    '}'
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_assets_AssetManager.c'
            else
                commandLine 'bash', '-c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_assets_AssetManager.c'
            workingDir "$buildDir${File.separator}dist${File.separator}source"
        }

        // Temporary patch to prevent crash, probably causes memory leaks
        exec {
            environment "expression", 'void\\W+__GC_MARK_com_badlogic_gdx_utils_JsonValue\\(CODENAME_ONE_THREAD_STATE,\\W+JAVA_OBJECT\\W+objToMark,\\W+JAVA_BOOLEAN\\W+force\\)\\W+{.*?}'
            environment "replacement", '' +
                    'void __GC_MARK_com_badlogic_gdx_utils_JsonValue(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT objToMark, JAVA_BOOLEAN force) {\n' +
                    '//    struct obj__com_badlogic_gdx_utils_JsonValue* objInstance = (struct obj__com_badlogic_gdx_utils_JsonValue*)objToMark;\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_type, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_stringValue, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_name, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_child, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_parent, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_next, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_prev, force);\n' +
                    '//    __GC_MARK_java_lang_Object(threadStateData, objToMark, force);\n' +
                    '}'
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_utils_JsonValue.c'
            else
                commandLine 'bash', '-c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_utils_JsonValue.c'
            workingDir "$buildDir${File.separator}dist${File.separator}source"
        }

        // Patch for compiler bug
        exec {
            environment "expression", 'JAVA_VOID\\W+kotlin_jvm_internal_Reflection___CLINIT____\\(CODENAME_ONE_THREAD_STATE\\)\\W+{.*?}'
            environment "replacement", '' +
                    'JAVA_VOID kotlin_jvm_internal_Reflection___CLINIT____(CODENAME_ONE_THREAD_STATE) {\n' +
                    '    JAVA_OBJECT factory = __NEW_kotlin_jvm_internal_ReflectionFactory(threadStateData);\n' +
                    '    kotlin_jvm_internal_ReflectionFactory___INIT____(threadStateData, factory);\n' +
                    '    set_static_kotlin_jvm_internal_Reflection_factory(threadStateData, factory);\n' +
                    '    set_static_kotlin_jvm_internal_Reflection_EMPTY_K_CLASS_ARRAY(threadStateData, __NEW_ARRAY_kotlin_reflect_KClass(threadStateData, 0));\n' +
                    '}'
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' kotlin_jvm_internal_Reflection.c'
            else
                commandLine 'bash', '-c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' kotlin_jvm_internal_Reflection.c'
            workingDir "$buildDir${File.separator}dist${File.separator}source"
        }

        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', "rsync -crh --delete --checksum --exclude 'cmake-build-debug' --exclude 'build' --exclude 'data' --exclude 'sdmc' --exclude 'build-run' --exclude 'build-uwp' --exclude '.idea' dist/ ${rootProject.name}"
            else
                commandLine 'bash', '-c', "rsync -crh --delete --checksum --exclude 'cmake-build-debug' --exclude 'build' --exclude 'data' --exclude 'sdmc' --exclude 'build-run' --exclude '.idea' dist/ ${rootProject.name}"
            workingDir "$buildDir"
        }
    }
}
configure(transpile) {
    group "SwitchGDX"
    description = "Run the transpiler to generate the C project code"
}

task run(dependsOn: transpile) {
    doLast {
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'C:\\devkitPro\\msys2\\msys2_shell.cmd', '-mingw64', '-where', "$buildDir${File.separator}${rootProject.name}", '-c', 'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build-run -G \'MSYS Makefiles\' && cmake --build build-run || sleep 50000'
            else
                commandLine 'bash', '-c', 'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build-run -G Ninja && cmake --build build-run'
            workingDir "$buildDir${File.separator}${rootProject.name}"
        }
        if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
            copy { // Todo: Copy only needed
                from "C:\\devkitPro\\msys2\\mingw64\\bin"
                include "*.dll"
                into "$buildDir\\${rootProject.name}\\build-run"
            }
        }
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', 'build-run\\SwitchGDX.exe'
            else
                commandLine 'bash', '-c', './build-run/SwitchGDX'
            workingDir "$buildDir${File.separator}${rootProject.name}"
        }
    }
}
configure(run) {
    group "SwitchGDX"
    description = "Run with the SwitchGDX backend on desktop"
}

task nro(dependsOn: transpile) {
    doLast {
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'C:\\devkitPro\\msys2\\msys2_shell.cmd', '-mingw64', '-where', "$buildDir${File.separator}${rootProject.name}", '-c', 'make -j8 || sleep 50000'
            else
                commandLine 'bash', '-c', 'make -j8'
            workingDir "$buildDir${File.separator}${rootProject.name}"
            environment 'APP_TITLE', appTitle
            environment 'APP_AUTHOR', appAuthor
            environment 'APP_VERSION', version
        }
    }
}
configure(nro) {
    group "SwitchGDX"
    description = "Build a homebrew NRO"
}

task deploy(dependsOn: transpile) {
    doLast {
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'bash', '-c', "/opt/devkitpro/tools/bin/nxlink --server ./${rootProject.name}.nro"
            else
                commandLine 'bash', '-c', "\$DEVKITPRO/tools/bin/nxlink --server ./${rootProject.name}.nro"
            workingDir "$buildDir${File.separator}${rootProject.name}"
        }
    }
}
configure(deploy) {
    group "SwitchGDX"
    description = "Run with the SwitchGDX backend on Switch via NxLink"
}

task ryujinx(dependsOn: nro) {
    doLast {
        Properties properties = new Properties();
        try {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        } catch (FileNotFoundException ignored) {
            throw new Exception('The path to the Ryujinx emulator executable is unset. Set "ryujinxPath" in local.properties file.')
        }
        if (!properties.containsKey('ryujinxPath'))
            throw new Exception('The path to the Ryujinx emulator executable is unset. Set "ryujinxPath" in local.properties file.')
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', "${properties.getProperty("ryujinxPath")} ${rootProject.name}.nro"
            else
                commandLine 'bash', '-c', "${properties.getProperty("ryujinxPath")} ${rootProject.name}.nro"
            workingDir "$buildDir${File.separator}${rootProject.name}"
        }
    }
}
configure(ryujinx) {
    group "SwitchGDX"
    description = "Run with the SwitchGDX backend on Switch via NxLink"
}

task uwp(dependsOn: transpile) {
    doLast {
        exec {
            commandLine 'cmd', '/c', "call uwp.cmd"
            workingDir "$buildDir${File.separator}${rootProject.name}"
        }
    }
}
configure(uwp) {
    group "SwitchGDX"
    description = "Generate the UWP project and open Visual Studio"
}
